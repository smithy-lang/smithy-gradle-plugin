/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

package software.amazon.smithy.gradle.tasks;


import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import javax.inject.Inject;
import org.gradle.api.DefaultTask;
import org.gradle.api.GradleException;
import org.gradle.api.file.DirectoryProperty;
import org.gradle.api.file.FileSystemOperations;
import org.gradle.api.file.ProjectLayout;
import org.gradle.api.provider.Property;
import org.gradle.api.provider.Provider;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.InputDirectory;
import org.gradle.api.tasks.Internal;
import org.gradle.api.tasks.OutputDirectory;
import org.gradle.api.tasks.TaskAction;
import software.amazon.smithy.gradle.SmithyUtils;


/**
 * Stages Smithy source files and manifest generated by the {@code sources} plugin into the
 * correct file structure for inclusion in a JAR as resources.
 *
 * <p>The smithy source files and smithy {@code manifest} file are expected to exist at
 * {@code META-INF/smithy/*} within a JAR in order to be discoverable by the Smithy CLI.
 *
 * <p>The temporary staging directory created by this task is named {@code staging-$TaskName}
 * in order to ensure that multiple staging tasks can be run without naming collisions.
 */
public abstract class SmithyJarStagingTask extends DefaultTask {
    private static final String DESCRIPTION = "Stages smithy models for addition to a jar file.";
    private static final String SOURCES_PLUGIN_NAME = "sources";
    private static final String SOURCE_PROJECTION = "source";

    private final FileSystemOperations fileSystemOperations;

    @Inject
    public SmithyJarStagingTask(FileSystemOperations fileSystemOperations,
                                ProjectLayout projectLayout) {
        this.fileSystemOperations = fileSystemOperations;
        getProjection().convention(SOURCE_PROJECTION);
        getOutputDir().set(projectLayout.getBuildDirectory().getLocationOnly());
        setDescription(DESCRIPTION);
    }

    /**
     * Input directory containing the smithy build artifacts to use for staging.
     *
     * <p>This should almost always be the output directory of a {@link SmithyBuildTask}.
     *
     */
    @InputDirectory
    public abstract DirectoryProperty getInputDirectory();

    /**
     * Projection to stage sources for.
     *
     * <p>Defaults to "source".
     *
     * <p>Note: The projection must exist in one of the smithy-build configs used to generate
     * the input directory.
     */
    @Input
    public abstract Property<String> getProjection();

    /**
     * Output Directory of the task.
     *
     * <p>Note: Marked as internal so that it is not checked for caching, although it can be used as
     * an input property.
      */
    @Internal
    public abstract DirectoryProperty getOutputDir();

    @Internal
    Provider<Path> getSourcesPluginPath() {
        return getInputDirectory().getAsFile().zip(getProjection(), (input, projection) ->
                SmithyUtils.getProjectionPluginPath(input, projection, SOURCES_PLUGIN_NAME));
    }

    @Internal
    Provider<File> getSmithyResourceTempDir() {
        return getOutputDir().getAsFile().map(file ->
                SmithyUtils.getSmithyResourceTempDir(getName(), file));
    }

    /**
     * Get the smithy staging directory path without the wrapping {@code META-INF} directory.
     *
     * <p>This output should be used when including staging directory as a {@code metaInf} file
     * for a jar task. For example:
     * <pre>
     *  tasks.register("MyJarTask") {
     *     // Include the staged files as a metaInf resource
     *     metaInf.from(stagingTask.smithyStagingDir.get())
     *     // Other inputs for the jar task
     *  }
     * </pre>
     */
    @OutputDirectory
    public Provider<File> getSmithyStagingDir() {
         return getSmithyResourceTempDir()
                 .map(File::getParentFile);
    }

    /**
     * Get the staged source directory.
     *
     * <p>This output should be used when including the staging directory in the resource sourceSet
     * for a project.
     */
    @OutputDirectory
    public Provider<File> getSmithyMetaInfDir() {
        return getSmithyStagingDir().map(File::getParentFile);
    }

    @TaskAction
    public void copyModelsToStaging() {
        getLogger().info("Copying smithy models to staging");
        Path sources = getSourcesPluginPath().get();
        validateSources(sources);

        fileSystemOperations.copy(c -> {
            c.from(sources.toFile());
            c.into(getSmithyResourceTempDir().get());
        });
    }

    private void validateSources(final Path sources) {
        if (!Files.isDirectory(sources)) {
            if (getProjection().get().equals("source")) {
                getLogger().warn("No Smithy model files were found");
            } else {
                // This means the projection was explicitly set, so fail if no models were found.
                throw new GradleException("Smithy projection `" + getProjection().get() + "` not found or does not "
                        + "contain any models. Is this projection defined in your "
                        + "smithy-build.json file?");
            }
        }
    }
}
